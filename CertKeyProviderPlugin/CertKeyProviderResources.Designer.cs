//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CertKeyProviderPlugin {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CertKeyProviderResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CertKeyProviderResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CertKeyProviderPlugin.CertKeyProviderResources", typeof(CertKeyProviderResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subject: {0}\nIssuer: {1}\nSerial Number: {2:X}.
        /// </summary>
        internal static string CertInfoTemplate {
            get {
                return ResourceManager.GetString("CertInfoTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following certificate did not validate properly.  Should the key file be encrypted for the certificate?\n\n{0}.
        /// </summary>
        internal static string CertInvalidContinue {
            get {
                return ResourceManager.GetString("CertInvalidContinue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate-protected key file.
        /// </summary>
        internal static string CertProtectedKeyFile {
            get {
                return ResourceManager.GetString("CertProtectedKeyFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create key file.
        /// </summary>
        internal static string CreateKeyFile {
            get {
                return ResourceManager.GetString("CreateKeyFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A random key will be encrypted for one or more certificates and then saved to disk.  This key will be used to encrypt the password database.\n\nIn the following dialogs you will need to select the file location where the key should be saved, and the certificates for which the key should be encrypted.  The certificates will be checked for validity.\n\nNote: if you lose the private keys that correspond to the selected certificates, you will not be able to access your password database.  It is important that y [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EncryptingKeyIntro {
            get {
                return ResourceManager.GetString("EncryptingKeyIntro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred decrypting the key: {0}.
        /// </summary>
        internal static string ErrDecryptingKey {
            get {
                return ResourceManager.GetString("ErrDecryptingKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred encrypting the key: {0}.
        /// </summary>
        internal static string ErrEncryptingKey {
            get {
                return ResourceManager.GetString("ErrEncryptingKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key file too big.
        /// </summary>
        internal static string KeyFileTooBig {
            get {
                return ResourceManager.GetString("KeyFileTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate-protected key.
        /// </summary>
        internal static string KeyProviderName {
            get {
                return ResourceManager.GetString("KeyProviderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No certificates left to encrypt for..
        /// </summary>
        internal static string NoCertsLeft {
            get {
                return ResourceManager.GetString("NoCertsLeft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You don&apos;t have a private key for any of the selected certificates. This means you will not be able to decrypt the key to open the database.\n\nAre you sure you want to continue?.
        /// </summary>
        internal static string NoPrivKeyForCerts {
            get {
                return ResourceManager.GetString("NoPrivKeyForCerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open key file.
        /// </summary>
        internal static string OpenKeyFile {
            get {
                return ResourceManager.GetString("OpenKeyFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select encryption certificate(s).
        /// </summary>
        internal static string SelectEncCert {
            get {
                return ResourceManager.GetString("SelectEncCert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select certificate(s) for which to encrypt the key.  Only users holding the private keys corresponding to these certificates will be able to decrypt the file..
        /// </summary>
        internal static string SelectEncCertLong {
            get {
                return ResourceManager.GetString("SelectEncCertLong", resourceCulture);
            }
        }
    }
}
